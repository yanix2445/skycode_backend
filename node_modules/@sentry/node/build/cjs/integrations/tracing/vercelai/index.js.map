{"version":3,"file":"index.js","sources":["../../../../../src/integrations/tracing/vercelai/index.ts"],"sourcesContent":["/* eslint-disable complexity */\nimport { SEMANTIC_ATTRIBUTE_SENTRY_OP, defineIntegration, spanToJSON } from '@sentry/core';\nimport type { IntegrationFn } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../../otel/instrument';\nimport { addOriginToSpan } from '../../../utils/addOriginToSpan';\nimport { SentryVercelAiInstrumentation, sentryVercelAiPatched } from './instrumentation';\n\nconst INTEGRATION_NAME = 'VercelAI';\n\nexport const instrumentVercelAi = generateInstrumentOnce(INTEGRATION_NAME, () => new SentryVercelAiInstrumentation({}));\n\nconst _vercelAIIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentVercelAi();\n    },\n    processEvent(event) {\n      if (event.type === 'transaction' && event.spans?.length) {\n        for (const span of event.spans) {\n          const { data: attributes, description: name } = span;\n\n          if (!name || span.origin !== 'auto.vercelai.otel') {\n            continue;\n          }\n\n          if (attributes['ai.usage.completionTokens'] != undefined) {\n            attributes['ai.completion_tokens.used'] = attributes['ai.usage.completionTokens'];\n          }\n          if (attributes['ai.usage.promptTokens'] != undefined) {\n            attributes['ai.prompt_tokens.used'] = attributes['ai.usage.promptTokens'];\n          }\n          if (\n            typeof attributes['ai.usage.completionTokens'] == 'number' &&\n            typeof attributes['ai.usage.promptTokens'] == 'number'\n          ) {\n            attributes['ai.total_tokens.used'] =\n              attributes['ai.usage.completionTokens'] + attributes['ai.usage.promptTokens'];\n          }\n        }\n      }\n\n      return event;\n    },\n    setup(client) {\n      client.on('spanStart', span => {\n        if (!sentryVercelAiPatched) {\n          return;\n        }\n\n        const { data: attributes, description: name } = spanToJSON(span);\n\n        if (!name) {\n          return;\n        }\n\n        // The id of the model\n        const aiModelId = attributes['ai.model.id'];\n\n        // the provider of the model\n        const aiModelProvider = attributes['ai.model.provider'];\n\n        // both of these must be defined for the integration to work\n        if (typeof aiModelId !== 'string' || typeof aiModelProvider !== 'string' || !aiModelId || !aiModelProvider) {\n          return;\n        }\n\n        let isPipelineSpan = false;\n\n        switch (name) {\n          case 'ai.generateText': {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.generateText');\n            isPipelineSpan = true;\n            break;\n          }\n          case 'ai.generateText.doGenerate': {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doGenerate');\n            break;\n          }\n          case 'ai.streamText': {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.streamText');\n            isPipelineSpan = true;\n            break;\n          }\n          case 'ai.streamText.doStream': {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doStream');\n            break;\n          }\n          case 'ai.generateObject': {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.generateObject');\n            isPipelineSpan = true;\n            break;\n          }\n          case 'ai.generateObject.doGenerate': {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doGenerate');\n            break;\n          }\n          case 'ai.streamObject': {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.streamObject');\n            isPipelineSpan = true;\n            break;\n          }\n          case 'ai.streamObject.doStream': {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doStream');\n            break;\n          }\n          case 'ai.embed': {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.embed');\n            isPipelineSpan = true;\n            break;\n          }\n          case 'ai.embed.doEmbed': {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.embeddings');\n            break;\n          }\n          case 'ai.embedMany': {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.embedMany');\n            isPipelineSpan = true;\n            break;\n          }\n          case 'ai.embedMany.doEmbed': {\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.embeddings');\n            break;\n          }\n          case 'ai.toolCall':\n          case 'ai.stream.firstChunk':\n          case 'ai.stream.finish':\n            span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run');\n            break;\n        }\n\n        addOriginToSpan(span, 'auto.vercelai.otel');\n\n        const nameWthoutAi = name.replace('ai.', '');\n        span.setAttribute('ai.pipeline.name', nameWthoutAi);\n        span.updateName(nameWthoutAi);\n\n        // If a Telemetry name is set and it is a pipeline span, use that as the operation name\n        const functionId = attributes['ai.telemetry.functionId'];\n        if (functionId && typeof functionId === 'string' && isPipelineSpan) {\n          span.updateName(functionId);\n          span.setAttribute('ai.pipeline.name', functionId);\n        }\n\n        if (attributes['ai.prompt']) {\n          span.setAttribute('ai.input_messages', attributes['ai.prompt']);\n        }\n        if (attributes['ai.model.id']) {\n          span.setAttribute('ai.model_id', attributes['ai.model.id']);\n        }\n        span.setAttribute('ai.streaming', name.includes('stream'));\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [ai](https://www.npmjs.com/package/ai) library.\n *\n * For more information, see the [`ai` documentation](https://sdk.vercel.ai/docs/ai-sdk-core/telemetry).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.vercelAIIntegration()],\n * });\n * ```\n *\n * By default this integration adds tracing support to all `ai` function calls. If you need to disable\n * collecting spans for a specific call, you can do so by setting `experimental_telemetry.isEnabled` to\n * `false` in the first argument of the function call.\n *\n * ```javascript\n * const result = await generateText({\n *   model: openai('gpt-4-turbo'),\n *   experimental_telemetry: { isEnabled: false },\n * });\n * ```\n *\n * If you want to collect inputs and outputs for a specific call, you must specifically opt-in to each\n * function call by setting `experimental_telemetry.recordInputs` and `experimental_telemetry.recordOutputs`\n * to `true`.\n *\n * ```javascript\n * const result = await generateText({\n *  model: openai('gpt-4-turbo'),\n *  experimental_telemetry: { isEnabled: true, recordInputs: true, recordOutputs: true },\n * });\n */\nexport const vercelAIIntegration = defineIntegration(_vercelAIIntegration);\n"],"names":["generateInstrumentOnce","SentryVercelAiInstrumentation","sentryVercelAiPatched","spanToJSON","SEMANTIC_ATTRIBUTE_SENTRY_OP","addOriginToSpan","defineIntegration"],"mappings":"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"}